<assembly name="xunit.v3.assert">

  <!-- Boolean asserts -->
  <member name="M:Xunit.Assert.False(System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>condition:true =&gt; halt</argument>
    </attribute>
    <attribute ctor="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
      <argument>IS_FALSE</argument>
    </attribute>
  </member>

  <member name="M:Xunit.Assert.False(System.Nullable{System.Boolean})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>condition:true =&gt; halt</argument>
    </attribute>
    <attribute ctor="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
      <argument>IS_FALSE</argument>
    </attribute>
  </member>

  <member name="M:Xunit.Assert.False(System.Boolean,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>condition:true =&gt; halt</argument>
    </attribute>
    <attribute ctor="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
      <argument>IS_FALSE</argument>
    </attribute>
  </member>

  <member name="M:Xunit.Assert.False(System.Nullable{System.Boolean},System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>condition:true =&gt; halt</argument>
    </attribute>
    <attribute ctor="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
      <argument>IS_FALSE</argument>
    </attribute>
  </member>

  <member name="M:Xunit.Assert.True(System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>condition:false =&gt; halt</argument>
    </attribute>
    <attribute ctor="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
      <argument>IS_TRUE</argument>
    </attribute>
  </member>

  <member name="M:Xunit.Assert.True(System.Nullable{System.Boolean})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>condition:false =&gt; halt</argument>
    </attribute>
    <attribute ctor="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
      <argument>IS_TRUE</argument>
    </attribute>
  </member>

  <member name="M:Xunit.Assert.True(System.Boolean,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>condition:false =&gt; halt</argument>
    </attribute>
    <attribute ctor="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
      <argument>IS_TRUE</argument>
    </attribute>
  </member>

  <member name="M:Xunit.Assert.True(System.Nullable{System.Boolean},System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>condition:false =&gt; halt</argument>
    </attribute>
    <attribute ctor="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
      <argument>IS_TRUE</argument>
    </attribute>
  </member>

  <!-- Collection asserts -->
  <member name="M:Xunit.Assert.All``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="collection">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
    <parameter name="action">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.Collection``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0}[])">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="collection">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
    <parameter name="elementInspectors">
      <attribute ctor="M:JetBrains.Annotations.ItemNotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.Contains``1(``0,System.Collections.Generic.IEnumerable{``0})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="collection">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.Contains``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="collection">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
    <parameter name="comparer">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="collection">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
    <parameter name="filter">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="collection">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.DoesNotContain``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="collection">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
    <parameter name="comparer">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.DoesNotContain``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="collection">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
    <parameter name="filter">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.Empty(System.Collections.IEnumerable)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="collection">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="expected">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
    <parameter name="actual">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.Equal``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="expected">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
    <parameter name="actual">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
    <parameter name="comparer">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.NotEmpty(System.Collections.IEnumerable)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="collection">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="expected">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
    <parameter name="actual">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.NotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="expected">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
    <parameter name="actual">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
    <parameter name="comparer">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.Single(System.Collections.IEnumerable)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="collection">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.Single(System.Collections.IEnumerable,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="collection">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
    <parameter name="expected">
      <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.Single``1(System.Collections.Generic.IEnumerable{``0})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="collection">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.Single``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="collection">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
    <parameter name="predicate">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>
  
  <!-- Equality asserts-->
  <member name="M:Xunit.Assert.Equal``1(``0,``0)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
  </member>

  <member name="M:Xunit.Assert.Equal``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="comparer">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.Equal(System.Double,System.Double,System.Int32)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" /> 
  </member>

  <member name="M:Xunit.Assert.Equal(System.Decimal,System.Decimal,System.Int32)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
  </member>

  <member name="M:Xunit.Assert.StrictEqual``1(``0,``0)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
  </member>

  <member name="M:Xunit.Assert.NotEqual``1(``0,``0)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
  </member>

  <member name="M:Xunit.Assert.NotEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="comparer">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.NotEqual(System.Double,System.Double,System.Int32)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
  </member>

  <member name="M:Xunit.Assert.NotEqual(System.Decimal,System.Decimal,System.Int32)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
  </member>

  <member name="M:Xunit.Assert.NotStrictEqual``1(``0,``0)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
  </member>

  <member name="M:Xunit.Assert.NotSame(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
  </member>

  <member name="M:Xunit.Assert.Same(System.Object,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
  </member>
  
  <!-- Exception asserts -->
  <member name="M:Xunit.Assert.Throws``1(System.Action)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="testCode">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.Throws``1(System.Func{System.Object})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="testCode">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.ThrowsAsync``1(System.Func{System.Threading.Tasks.Task})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="testCode">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.ThrowsAny``1(System.Action)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="testCode">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.ThrowsAny``1(System.Func{System.Object})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="testCode">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.ThrowsAnyAsync``1(System.Func{System.Threading.Tasks.Task})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="testCode">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.Throws(System.Type,System.Action)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="exceptionType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="testCode">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.Throws(System.Type,System.Func{System.Object})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="exceptionType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="testCode">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.ThrowsAsync(System.Type,System.Func{System.Threading.Tasks.Task})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="exceptionType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="testCode">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.Throws``1(System.String,System.Action)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="paramName">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="testCode">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.Throws``1(System.String,System.Func{System.Object})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="paramName">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="testCode">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.ThrowsAsync``1(System.String,System.Func{System.Threading.Tasks.Task})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <parameter name="paramName">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="testCode">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>
  
  <!-- Null asserts -->
  <member name="M:Xunit.Assert.NotNull(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>object:null =&gt; halt</argument>
    </attribute>
    <parameter name="object">
      <attribute ctor="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
        <argument>IS_NOT_NULL</argument>
      </attribute>
    </parameter>
  </member>

  <member name="M:Xunit.Assert.Null(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>object:notnull =&gt; halt</argument>
    </attribute>
    <parameter name="object">
      <attribute ctor="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
        <argument>IS_NULL</argument>
      </attribute>
    </parameter>
  </member>

  <!-- Property asserts -->
  <member name="M:Xunit.Assert.PropertyChanged(System.ComponentModel.INotifyPropertyChanged,System.String,System.Action)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="object">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="testCode">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>
  
  <!-- Range asserts -->
  <member name="M:Xunit.Assert.InRange``1(``0,``0,``0)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
  </member>
  <member name="M:Xunit.Assert.InRange``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="comparer">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.NotInRange``1(``0,``0,``0)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
  </member>
  <member name="M:Xunit.Assert.NotInRange``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="comparer">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  
  <!-- Record -->
  <member name="M:Xunit.Assert.RecordException(System.Action)">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="testCode">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>
  
  <member name="M:Xunit.Assert.RecordException(System.Func{System.Object})">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="testCode">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>
  
  <member name="M:Xunit.Assert.RecordExceptionAsync(System.Func{System.Threading.Tasks.Task})">
    <attribute ctor="M:JetBrains.Annotations.PureAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.CanBeNullAttribute.#ctor" />
    <parameter name="testCode">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.InstantHandleAttribute.#ctor" />
    </parameter>
  </member>
  
  <!-- Set asserts -->
  <member name="M:Xunit.Assert.ProperSubset``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>actual:null =&gt; halt</argument>
    </attribute>
    <parameter name="expectedSuperset">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="actual">
      <attribute ctor="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
        <argument>IS_NOT_NULL</argument>
      </attribute>
    </parameter>
  </member>

  <member name="M:Xunit.Assert.ProperSuperset``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>actual:null =&gt; halt</argument>
    </attribute>
    <parameter name="expectedSubset">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="actual">
      <attribute ctor="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
        <argument>IS_NOT_NULL</argument>
      </attribute>
    </parameter>
  </member>

  <member name="M:Xunit.Assert.Subset``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>actual:null =&gt; halt</argument>
    </attribute>
    <parameter name="expectedSuperset">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="actual">
      <attribute ctor="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
        <argument>IS_NOT_NULL</argument>
      </attribute>
    </parameter>
  </member>

  <member name="M:Xunit.Assert.Superset``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0})">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>actual:null =&gt; halt</argument>
    </attribute>
    <parameter name="expectedSubset">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="actual">
      <attribute ctor="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
        <argument>IS_NOT_NULL</argument>
      </attribute>
    </parameter>
  </member>
  
  <!-- String asserts -->
  <member name="M:Xunit.Assert.Contains(System.String,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="actualString">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.Contains(System.String,System.String,System.StringComparison)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="actualString">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>
  
  <member name="M:Xunit.Assert.DoesNotContain(System.String,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="actualString">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.DoesNotContain(System.String,System.String,System.StringComparison)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="actualString">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.StartsWith(System.String,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="expectedStartString">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="actualString">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.StartsWith(System.String,System.String,System.StringComparison)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="expectedStartString">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="actualString">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.EndsWith(System.String,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="expectedEndString">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="actualString">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.EndsWith(System.String,System.String,System.StringComparison)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="expectedEndString">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="actualString">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.Matches(System.String,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="expectedRegexPattern">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.RegexPatternAttribute.#ctor" />
    </parameter>
    <parameter name="actualString">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.Matches(System.Text.RegularExpressions.Regex,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="exectedRegex">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.RegexPatternAttribute.#ctor" />
    </parameter>
    <parameter name="actualString">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.DoesNotMatch(System.String,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="expectedRegexPattern">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.RegexPatternAttribute.#ctor" />
    </parameter>
    <parameter name="actualString">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.DoesNotMatch(System.Text.RegularExpressions.Regex,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <parameter name="expectedRegex">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
      <attribute ctor="M:JetBrains.Annotations.RegexPatternAttribute.#ctor" />
    </parameter>
    <parameter name="actualString">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
  </member>

  <member name="M:Xunit.Assert.Equal(System.String,System.String)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
  </member>

  <member name="M:Xunit.Assert.Equal(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
  </member>

  <!-- Type asserts -->
  <member name="M:Xunit.Assert.IsAssignableFrom``1(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>object:null =&gt; halt</argument>
    </attribute>
    <parameter name="object">
      <attribute ctor="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
        <argument>IS_NOT_NULL</argument>
      </attribute>
    </parameter>
  </member>

  <member name="M:Xunit.Assert.IsAssignableFrom(System.Type,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>object:null =&gt; halt</argument>
    </attribute>
    <parameter name="expectedType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="object">
      <attribute ctor="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
        <argument>IS_NOT_NULL</argument>
      </attribute>
    </parameter>
  </member>

  <member name="M:Xunit.Assert.IsNotType``1(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>object:null =&gt; halt</argument>
    </attribute>
    <parameter name="object">
      <attribute ctor="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
        <argument>IS_NOT_NULL</argument>
      </attribute>
    </parameter>
  </member>

  <member name="M:Xunit.Assert.IsNotType(System.Type,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>object:null =&gt; halt</argument>
    </attribute>
    <parameter name="expectedType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="object">
      <attribute ctor="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
        <argument>IS_NOT_NULL</argument>
      </attribute>
    </parameter>
  </member>

  <member name="M:Xunit.Assert.IsType``1(System.Object)">
    <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>object:null =&gt; halt</argument>
    </attribute>
    <parameter name="object">
      <attribute ctor="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
        <argument>IS_NOT_NULL</argument>
      </attribute>
    </parameter>
  </member>

  <member name="M:Xunit.Assert.IsType(System.Type,System.Object)">
    <attribute ctor="M:JetBrains.Annotations.AssertionMethodAttribute.#ctor" />
    <attribute ctor="M:JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <argument>object:null =&gt; halt</argument>
    </attribute>
    <parameter name="expectedType">
      <attribute ctor="M:JetBrains.Annotations.NotNullAttribute.#ctor" />
    </parameter>
    <parameter name="object">
      <attribute ctor="M:JetBrains.Annotations.AssertionConditionAttribute.#ctor(JetBrains.Annotations.AssertionConditionType)">
        <argument>IS_NOT_NULL</argument>
      </attribute>
    </parameter>
  </member>
</assembly>
